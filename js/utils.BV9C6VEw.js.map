{"version":3,"file":"utils.BV9C6VEw.js","sources":["../../src/utils/date.ts","../../src/utils/guard.ts","../../src/utils/general.ts","../../src/utils/dealRoute.ts","../../src/utils/file.ts","../../src/utils/menus.ts"],"sourcesContent":["import moment from \"moment\";\r\n/**\r\n * @description 输入时间，返回指定格式的时间\r\n * @param date 输入的时间\r\n * @param format 指定格式\r\n * @return {String}\r\n */\r\nexport function formateDate(\r\n  date: Date | number | string,\r\n  format: string = \"YYYY-MM-DD\"\r\n) {\r\n  // moment不能转换字符串类型的时间戳，要先转换成数字再格式化\r\n  //   if (typeof date === \"number\") return moment(Number(date)).format(format);\r\n  //   else\r\n  return moment(new Date(date)).format(format);\r\n}\r\n\r\nexport function deepProxy(obj: object, handler: object) {\r\n  return new Proxy(obj, handler);\r\n}\r\n","import { getCurrentInstance } from \"vue\";\r\ntype HasEventListItem = { name: string; result: boolean };\r\nexport class HasEvent {\r\n  list: HasEventListItem[];\r\n  constructor(eventName: string | string[]) {\r\n    if (typeof eventName == \"string\") {\r\n      eventName = [eventName];\r\n    }\r\n    this.list = [];\r\n    for (const item in eventName) {\r\n      this.list.push({ name: item, result: false });\r\n    }\r\n  }\r\n  get(eventName: string) {\r\n    return this.list.find((item) => (item.name = eventName));\r\n  }\r\n}\r\nexport function hasEvent(eventName: string | string[]) {\r\n  if (typeof eventName == \"string\") eventName = [eventName];\r\n  const ins = getCurrentInstance();\r\n  //   debugger;\r\n  if (!ins) return [];\r\n  const res = eventName.map((item) => {\r\n    // item是以on开头的就直接返回，不是就首字母大写并拼接上on\r\n    item = item.startsWith(\"on\")\r\n      ? item\r\n      : \"on\" + item.charAt(0).toUpperCase() + item.slice(1);\r\n    return {\r\n      name: item,\r\n      result: item in (ins.vnode.props || {}) ? true : false,\r\n    };\r\n  });\r\n  return res;\r\n}\r\n","/**\r\n * @name 节流\r\n * @param {Function} callback 要执行的回调函数\r\n * @param {Number} delay 延迟时间\r\n * @param {Boolean} isImmediate 是否立即执行回调函数\r\n * @returns {Function}\r\n */\r\ntype Func = (...args: any[]) => void;\r\n\r\nexport function throttle<T extends Func>(\r\n  callback: T,\r\n  delay: number = 1000,\r\n  isImmediate: boolean = false\r\n) {\r\n  let timer: number | undefined = undefined;\r\n  return function (this: any, ...args: Parameters<T>) {\r\n    if (timer) return;\r\n    if (!isImmediate) return callback.apply(this, args);\r\n    timer = setTimeout(() => {\r\n      clearTimeout(timer);\r\n      timer = undefined;\r\n      if (isImmediate) callback.apply(this, args);\r\n    }, delay);\r\n  } as T;\r\n}\r\n/**\r\n * @name 防抖\r\n * @description 只有最后一次触发才执行\r\n * @param {Function}callback  要执行的回调函数\r\n * @param {Number}interval 触发间隔\r\n * @returns\r\n */\r\nexport function debounce<T extends Func>(\r\n  callback: T,\r\n  interval: number = 1000\r\n): T {\r\n  let timer: number | undefined = undefined;\r\n  return function (this: any, ...args: Parameters<T>) {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      callback.apply(this, args);\r\n    }, interval);\r\n  } as T;\r\n}\r\ntype FieldType =\r\n  | \"number\"\r\n  | \"string\"\r\n  | \"undefined\"\r\n  | \"null\"\r\n  | \"object\"\r\n  | \"array\"\r\n  | \"function\"\r\n  | \"date\"\r\n  | \"regexp\"\r\n  | \"bigint\"\r\n  | \"symbol\";\r\n/**\r\n * @name 变量类型\r\n * @description: 检测变量的类型\r\n * @param {any} field  要检测的类型\r\n * @return {FieldType}\r\n */\r\nexport function varType(field: any): FieldType {\r\n  return Object.prototype.toString\r\n    .call(field)\r\n    .slice(8, -1)\r\n    .toLowerCase() as FieldType;\r\n}\r\nexport function setCache(key: string, value: any) {\r\n  window.addEventListener(\"beforeunload\", () => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  });\r\n}\r\nexport function getCache(key: string) {\r\n  const cache = localStorage.getItem(key);\r\n  if (cache) {\r\n    return JSON.parse(cache);\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @description 大驼峰、小驼峰转短横线命名法\r\n */\r\nexport function toKebabCase(str: string) {\r\n  str = str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\r\n  console.log(\"命名\", str);\r\n  return str;\r\n}\r\n\r\n/**\r\n * @description 将小驼峰和短横线转为大驼峰\r\n * @param str\r\n * @returns\r\n */\r\nexport function toPascalCase(str: string) {\r\n  return str\r\n    .split(\"-\")\r\n    .map((part) => {\r\n      return part.charAt(0).toUpperCase() + part.slice(1);\r\n    })\r\n    .join(\"\");\r\n}\r\n\r\n/**\r\n * 将大驼峰（PascalCase）或短横线（kebab-case）转换为小驼峰（camelCase）\r\n * @param str 输入字符串（如 'UserName'、'user-name'、'Age'）\r\n * @returns 小驼峰格式字符串（如 'userName'、'userName'、'age'）\r\n */\r\nexport function toCamelCase(str: string): string {\r\n  if (str.length === 0) return str;\r\n\r\n  // 先处理短横线格式：分割后转换为首字母大写，再拼接\r\n  const processed = str\r\n    .split(\"-\")\r\n    .map((part) => {\r\n      // 空字符串部分直接返回（处理连续短横线的边缘情况）\r\n      if (part === \"\") return \"\";\r\n      // 首字母大写，拼接剩余部分\r\n      return part.charAt(0).toUpperCase() + part.slice(1);\r\n    })\r\n    .join(\"\");\r\n\r\n  // 确保整个字符串的第一个字母为小写，拼接剩余部分\r\n  return processed.charAt(0).toLowerCase() + processed.slice(1);\r\n}\r\n\r\nexport class AutoId {\r\n  cur: number;\r\n  len: number;\r\n  str: string;\r\n  constructor(cur: number = 0, len: number = 5, str: string = \"0\") {\r\n    this.cur = cur;\r\n    this.len = len;\r\n    this.str = str;\r\n  }\r\n  next() {\r\n    let cur = ++this.cur;\r\n    let len = this.len - this.cur.toString().length;\r\n    return cur.toString().padStart(len, this.str);\r\n  }\r\n}\r\n","import { useRouter, useRoute } from \"vue-router\";\r\nconst routeModel = import.meta.env.VITE_ROUTER_MODEL;\r\nconst base = import.meta.env.VITE_BASE_PATH;\r\n// 跳转页面需要加上vite中的base配置的路径\r\nconst routerPrefix =\r\n  pathSlashHandler(base) + (routeModel == \"hash\" ? \"/#\" : \"\");\r\ntype NavigateTo = ParamsUnion<ReturnType<typeof useRouter>[\"push\"]>;\r\n/***************************************************************************************************/\r\n/**\r\n * @class\r\n * @description 创建一个路由管理器\r\n */\r\nexport class CreateRouterManager {\r\n  router: ReturnType<typeof useRouter>;\r\n  route: ReturnType<typeof useRoute>;\r\n\r\n  constructor() {\r\n    this.router = useRouter();\r\n    this.route = useRoute();\r\n  }\r\n  navigateTo(to: NavigateTo) {\r\n    this.router.push(to);\r\n  }\r\n  goBack() {\r\n    this.router.back();\r\n  }\r\n  refresh() {}\r\n}\r\ntype Tab = {\r\n  path: string; //跳转的url\r\n  params?: {\r\n    [P: string]: any;\r\n  };\r\n};\r\n/***************************************************************************************************/\r\n/**\r\n * @class\r\n *@description 创建一个打开新标签页的实例\r\n */\r\nexport class CreateTabPage {\r\n  readonly tabName: string;\r\n  route: ReturnType<typeof useRoute>;\r\n  constructor(tabName: string) {\r\n    this.tabName = tabName;\r\n    this.route = useRoute();\r\n  }\r\n  openTab(to: Tab) {\r\n    if (typeof to.path === \"string\") {\r\n      to.path = pathSlashHandler(to.path);\r\n    }\r\n    // 将params中的参数都拼接到url上\r\n    to.path = to.path + objTOPath(to.params || {});\r\n    // 路由模式为hash则拼接/#/字符串，否则拼接空字符串\r\n    to.path = routerPrefix + to.path;\r\n    // return;\r\n    window.open(to.path, this.tabName);\r\n  }\r\n  getParams() {\r\n    console.log(\"window.location,csRouter\", window.location, this.route);\r\n    const params = Object.assign(this.route.params, this.route.query);\r\n    return params;\r\n  }\r\n  closeTab() {\r\n    window.close();\r\n  }\r\n}\r\n/***************************************************************************************************/\r\n/**\r\n * @description 将data转换为键值对字符串,返回值不为空字符串就在前面加一个?,为空就返回空字符串\r\n * @param  data 任意对象\r\n * @returns {string} 键值对字符串\r\n * @example 返回值格式为\"?a=1&b=2\" 或者 \"\"\r\n */\r\nfunction objTOPath<T extends object>(data: T): string {\r\n  // 如果data对象不存在或者data中没有属性就返回空字符串\r\n  if (!Object.keys(data).length) return \"\";\r\n  let arr: string[] = [];\r\n  let char = \"\";\r\n  for (const key in data) {\r\n    arr.push(`${key}=${data[key]}`);\r\n  }\r\n  char = arr.join(\"&\");\r\n  // 有参数就返回?+char,无参数就返回char\r\n  return char && \"?\" + char;\r\n}\r\n/**\r\n * @description 返回一个开头有/,结尾不带/的路径字符串\r\n * @returns {string}\r\n */\r\nexport function pathSlashHandler(path: string) {\r\n  if (!path || path == \"/\") return \"\";\r\n  if (!path.startsWith(\"/\")) path = \"/\" + path;\r\n  if (path.startsWith(\"/http\")) path = path.slice(1);\r\n  if (path.endsWith(\"/\")) path = path.slice(0, -1);\r\n  return path;\r\n}\r\n","export async function fileToFormData(file: File, pathName: string = \"file\") {\r\n  const formData = new FormData();\r\n  formData.append(pathName, file);\r\n  return formData;\r\n}\r\nexport function fileToBase64(file: File) {\r\n  return new Promise(\r\n    (\r\n      resolve: (value: {\r\n        state: \"success\" | \"fail\";\r\n        message?: string;\r\n        ext: string | undefined;\r\n        base64: string;\r\n      }) => void,\r\n      reject: (reason: {\r\n        state: \"fail\";\r\n        message: ProgressEvent<FileReader>;\r\n      }) => void\r\n    ) => {\r\n      const ext = file.name.split(\".\").pop();\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const uint8Array = new Uint8Array(e.target!.result as ArrayBuffer);\r\n        const str = uint8Array.reduce(\r\n          (data, byte) => data + String.fromCharCode(byte),\r\n          \"\"\r\n        );\r\n        const base64 = btoa(str);\r\n        resolve({\r\n          state: \"success\",\r\n          ext,\r\n          base64,\r\n        });\r\n      };\r\n      reader.onerror = (e) => {\r\n        reject({\r\n          state: \"fail\",\r\n          message: e,\r\n        });\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n  );\r\n}\r\nexport function fileToBinary(file: File) {\r\n  return new Promise(\r\n    (\r\n      resolve: (value: { state: \"success\"; binary: ArrayBuffer }) => void,\r\n      reject: (reason: {\r\n        state: \"fail\";\r\n        message: ProgressEvent<FileReader>;\r\n      }) => void\r\n    ) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const binary = reader.result as ArrayBuffer;\r\n        resolve({\r\n          state: \"success\",\r\n          binary,\r\n        });\r\n      };\r\n      reader.onerror = (e) => {\r\n        reject({\r\n          state: \"fail\",\r\n          message: e,\r\n        });\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n  );\r\n}\r\n\r\nexport function downloadFile(file: File, fileName: string) {\r\n  const link = document.createElement(\"a\");\r\n  link.href = URL.createObjectURL(file);\r\n  link.download = fileName;\r\n  link.click();\r\n}\r\n","import type { CustomRouteRecordRaw } from \"@/types/router\";\r\nimport type { ExMenuItemType } from \"@/types/store\";\r\n// 项目菜单配\r\nexport function getAllMenus(list: CustomRouteRecordRaw[]) {\r\n  const allMenus: ExMenuItemType[] = list.map((item) => {\r\n    return {\r\n      index: item.name as string,\r\n      title: item.labelName,\r\n      isHidden: item.isHidden || false,\r\n      children: item.children ? getAllMenus(item.children) : [],\r\n    };\r\n  });\r\n  return allMenus;\r\n}\r\nexport function getTopMenus(list: ExMenuItemType[]): ExMenuItemType[] {\r\n  return list\r\n    .filter((item) => !item.isHidden)\r\n    .map((item) => {\r\n      return {\r\n        index: item.index,\r\n        title: item.title,\r\n        isHidden: item.isHidden,\r\n        // children: item.children ? getTopMenus(item.children) : [],\r\n      };\r\n    });\r\n}\r\nexport function getSIdeMenus(\r\n  list: ExMenuItemType[],\r\n  activeIndex?: string\r\n): ExMenuItemType[] {\r\n  let obj: ExMenuItemType | undefined;\r\n  if (activeIndex) {\r\n    obj = list.find((item) => item.index === activeIndex);\r\n    list = obj?.children || [];\r\n  }\r\n  const sideMenus = list\r\n    .filter((item) => !item.isHidden)\r\n    .map((item) => {\r\n      return {\r\n        index: item.index,\r\n        title: item.title,\r\n        isHidden: item.isHidden,\r\n        children: item.children ? getSIdeMenus(item.children) : [],\r\n      };\r\n    });\r\n  return sideMenus;\r\n}\r\n"],"names":["formateDate","date","format","moment","hasEvent","eventName","ins","getCurrentInstance","item","throttle","callback","delay","isImmediate","timer","args","AutoId","cur","len","str","__publicField","base","routerPrefix","pathSlashHandler","CreateRouterManager","useRouter","useRoute","to","CreateTabPage","tabName","objTOPath","data","arr","char","key","path","fileToFormData","file","pathName","formData","fileToBase64","resolve","reject","ext","reader","e","byte","base64","fileToBinary","binary","getAllMenus","list","getTopMenus","getSIdeMenus","activeIndex","obj"],"mappings":"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"}